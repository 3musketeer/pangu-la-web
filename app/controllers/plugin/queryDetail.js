var mongoose = require('mongoose')  , debug = require('debug')('pangu:top')  , util = require("util")  , config = require('../config_top').cfgDetail  , cfgTop = require('../config_top').cfgTop  , query = require('../query')  , EventProxy = require('eventproxy').EventProxy  , extend = require('extend')  , configErrorType = require('../config_error_type');exports.plugin = function(server) {        server.get('/initQueryTopDetail.html', function(req, res) {        var  mode = req.query.mode            ,type = req.query.type            ,scope = req.query.scope            ,value = req.query.value            ,subtype = req.query.subtype || ''            ,requestParam = req.query.requestParam || ''               var headTile = cfgTop['TuxStateFailedSumByLcu'].name;        if (scope=="hours") headTile= headTile+"(时)";        else if (scope=="day") headTile= headTile+"(日)";        else if (scope=="month") headTile= headTile+"(月)";        else if (scope=="year") headTile= headTile+"(年)";                   var queryUrl = "/queryLcuFailDetail.html?mode="+'TuxState'+"&type="+'FailedSum'+"&scope="+'day'+"&subtype="+'ByLcu'+"&value="+value+"&requestParam="+requestParam;        res.render('plugin/lcuErrorTopList/detail',{            layout: false,            titles: config['TuxStateFailedSumByLcu'].titles,             queryUrl:queryUrl,            headTile:headTile        });          });             server.get('/queryLcuFailDetail.html', function(req, res) {            	var mode = req.query.mode        	  , type = req.query.type        	  , scope = req.query.scope        	  , value = req.query.value        	  , subtype = req.query.subtype || ''        	  , iDisplayStart = req.query.iDisplayStart        	  , iDisplayLength = req.query.iDisplayLength            , sSearch = req.query.sSearch            , requestParam = req.query.requestParam || ''                    if(!iDisplayStart) iDisplayStart = 0;            if(!iDisplayLength) iDisplayLength = 10;                  	var table = query.getTable(mode, type, scope, value)                	type += subtype;                	if (!config[mode+type])        		return next(new Error('not found'));        	        	var tempConfig ={};	          extend(true,tempConfig,config[mode+type]);                     if (sSearch && sSearch != ""){                var filter ={};                 if(tempConfig.filter)                        er= tempConfig.filter;                filter.$or = [];                tempConfig.filterColNames.forEach(function(col){                        var obj = {};                    obj[col] = new RegExp(sSearch);                    filter.$or.push(obj);                   });                     tempConfig.filter = filter;            }                        if (requestParam != ''){                var filter ={};                 if(tempConfig.filter)                        er= tempConfig.filter;                filter.$or = [];                tempConfig.filterColNames.forEach(function(col){                        var obj = {};                    obj[col] = new RegExp(requestParam);                    filter.$or.push(obj);                   });                     tempConfig.filter = filter;            }                         tempConfig.limit = iDisplayLength;            tempConfig.skip = iDisplayStart;                           var render = function(count,docs){                var output = {};                var temp = [];                output.sEcho = parseInt(req.query.sEcho);                output.iTotalRecords = count;                output.iTotalDisplayRecords = count;                output.aaData = [];                                        docs.forEach(function(item,idx){                    tempConfig.colNames.forEach(function(col){                            if(col == '#') {                             temp.push(parseInt(iDisplayStart)+1+idx);                        }else{                                     temp.push(item[col]);                        }                              });                    output.aaData.push(temp);                    temp = [];                });                 var response = JSON.stringify(output);                        res.send(response);        	}                        var proxy = new EventProxy();        	proxy.assign('count', 'docs', render);        	            table.getCount(tempConfig,function(cnt){                 proxy.trigger('count', cnt);            });                    	table.list(tempConfig, function(err, docs){	                	    proxy.trigger('docs', docs);			        	})    });                    server.get('/initQueryListDetail.html', function(req, res) {        var  mode = req.query.mode            ,type = req.query.type            ,scope = req.query.scope            ,value = req.query.value            ,subtype = req.query.subtype || ''            ,requestParam = req.query.requestParam || ''               var headTile = "";//cfgTop['TuxStateFailedListByLcu'].name;        if (scope=="hours") headTile= headTile+"(时)";        else if (scope=="day") headTile= headTile+"(日)";        else if (scope=="month") headTile= headTile+"(月)";        else if (scope=="year") headTile= headTile+"(年)";                   var queryUrl = "/queryLcuFailDetail.html?mode="+'TuxState'+"&type="+'FailedList'+"&scope="+'day'+"&subtype="+'ByLcu'+"&value="+value+"&requestParam="+requestParam;;        res.render('plugin/lcuErrorList/detail',{            layout: false,            titles: config['TuxStateFailedListByLcu'].titles,             queryUrl:queryUrl,            headTile:headTile        });          });            server.get('/queryErrorDetails.html', function(req, res) {        var  mode = req.query.mode            ,type = req.query.type            ,scope = req.query.scope            ,value = req.query.value            ,subtype = req.query.subtype || ''            ,requestParam = req.query.requestParam || ''               var headTile = "";//cfgTop['TuxStateFailedErrorDetailByLcu'].name;        if (scope=="hours") headTile= headTile+"(时)";        else if (scope=="day") headTile= headTile+"(日)";        else if (scope=="month") headTile= headTile+"(月)";        else if (scope=="year") headTile= headTile+"(年)";                   var queryUrl = "/queryLcuFailDetail.html?mode="+'TuxState'+"&type="+'FailedErrorDetail'+"&scope="+'day'+"&subtype="+'ByLcu'+"&value="+value+"&requestParam="+requestParam;;        res.render('plugin/lcuErrorDetail/detail',{            layout: false,            titles: config['TuxStateFailedErrorDetailByLcu'].titles,             queryUrl:queryUrl,            headTile:headTile        });          });                		    server.get('/analysisLcuError.html', function(req, res) {        var requestParam = req.query.requestParam || '';        var param = "";                for (m in configErrorType){            var errorType = configErrorType[m];            if(requestParam.indexOf(errorType.key)){                param = errorType.key;                break;            }        }                console.log("param="+param);        var TuxStateFailedErrorType =  {                titles: ['编号','错误类型','错误关键字', '解决提示']	      };                var queryUrl = "/queryLcuErroranalysisInfo.html?"+"requestParam="+param;         res.render('plugin/analysisLcuError/analysisError',{            layout: false,            titles: TuxStateFailedErrorType.titles,             queryUrl:queryUrl,            headTile:""        });    });                server.get('/queryLcuErroranalysisInfo.html', function(req, res) {            var  requestParam = req.query.requestParam || ''            , iDisplayStart = req.query.iDisplayStart        	  , iDisplayLength = req.query.iDisplayLength            , sSearch = req.query.sSearch;            if(!iDisplayStart) iDisplayStart = 0;        if(!iDisplayLength) iDisplayLength = 10;                var TuxStateFailedErrorType =  {                titles: ['编号','错误类型','错误关键字', '解决提示'],        		colNames: ['#','errorKey','errorDetail','analysisInfo'],        		filterColNames: ['errorKey','errorDetail', 'analysisInfo'],        		sort: {'errorKey' : -1}	      };                   var table = mongoose.model('lcuErrorTypeInfo', 'lcuErrorType');        var tempConfig ={};	        extend(true,tempConfig,TuxStateFailedErrorType);                if (sSearch && sSearch != ""){            var filter ={};             if(tempConfig.filter)                    er= tempConfig.filter;            filter.$or = [];            tempConfig.filterColNames.forEach(function(col){                    var obj = {};                obj[col] = new RegExp(sSearch);                filter.$or.push(obj);               });                 tempConfig.filter = filter;        }                if (requestParam != ''){            var filter ={};             if(tempConfig.filter)                    er= tempConfig.filter;            filter.$or = [];            tempConfig.filterColNames.forEach(function(col){                    var obj = {};                obj[col] = new RegExp(requestParam);                filter.$or.push(obj);               });                 tempConfig.filter = filter;        }                 tempConfig.limit = iDisplayLength;        tempConfig.skip = iDisplayStart;                   var render = function(count,docs){            var output = {};            var temp = [];            output.sEcho = parseInt(req.query.sEcho);            output.iTotalRecords = count;            output.iTotalDisplayRecords = count;            output.aaData = [];                                docs.forEach(function(item,idx){                tempConfig.colNames.forEach(function(col){                        if(col == '#') {                         temp.push(parseInt(iDisplayStart)+1+idx);                    }else{                                 temp.push(item[col]);                    }                          });                output.aaData.push(temp);                temp = [];            });             var response = JSON.stringify(output);                    res.send(response);    	}              var proxy = new EventProxy();    	proxy.assign('count', 'docs', render);    	      table.getCount(tempConfig,function(cnt){             proxy.trigger('count', cnt);        });            	table.list(tempConfig, function(err, docs){	            	    proxy.trigger('docs', docs);			    	})    });    }