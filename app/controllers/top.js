var mongoose = require('mongoose')  , debug = require('debug')('pangu:top')  , util = require("util")  , config = require('./config_top').cfgDetail  , cfgTop = require('./config_top').cfgTop  , query = require('./query')  , EventProxy = require('eventproxy').EventProxy  , extend = require('extend')  , env = process.env.NODE_ENV || 'development'  , redisCfg = require('../../config/config')[env].redis  , redis = require('redis')  , client = redis.createClient(redisCfg.port, redisCfg.host);exports.initDetail = function (req, res, next) {    var mode = req.query.mode       ,type = req.query.type       ,scope = req.query.scope       ,value = req.query.value       ,subtype = req.query.subtype || ''           var headTile = cfgTop[mode+type+subtype].name;    if (scope=="hours") headTile= headTile+"(时)";    else if (scope=="day") headTile= headTile+"(日)";    else if (scope=="month") headTile= headTile+"(月)";    else if (scope=="year") headTile= headTile+"(年)";           var queryUrl = "/topDetail.html?mode="+mode+"&type="+type+"&scope="+scope+"&subtype="+subtype+"&value="+value;    res.renderPjax('top/detail',{        titles: config[mode+type+subtype].titles,         queryUrl:queryUrl,        headTile:headTile    });}exports.lcuList = function(req, res) {    var value = req.query.value;	var list = [ {mode:'TuxState', type:'CalledSumByLcu', subtype: '',value:value},   				 {mode:'TuxState', type:'FailedSumByLcu', subtype: '',value:value},				 {mode:'TuxState', type:'AllTime', subtype: 'ByLcu',value:value}],        list1 = [ {mode:'TuxState', type:'TimeOutTop',value:value} ]    query.redisMQuery(list1, cfgTop, 10, function(err, docs1) {        query.multiQuery(list, cfgTop, 10, function(err, docs) {            extend(true,docs,docs1);            debug("doc:%s", util.inspect(docs))            res.renderPjax('top/lcuList', {all: docs})        })    })}exports.svcList = function(req, res) {       var value = req.query.value;	var list = [				 {mode:'TuxState', type:'AllTime', subtype: 'BySvr',value:value},				 {mode:'TuxState', type:'CalledSumBySvr', subtype: '',value:value},   				 {mode:'TuxState', type:'FailedSumBySvr', subtype: '',value:value}	]	query.multiQuery(list, cfgTop, 10, function(err, docs) {		debug("doc:%s", util.inspect(docs))		res.renderPjax('top/svcList', {all: docs})	})}exports.detail = function(req, res, next) {	var mode = req.query.mode	  , type = req.query.type	  , scope = req.query.scope	  , value = req.query.value	  , subtype = req.query.subtype || ''	  , iDisplayStart = req.query.iDisplayStart	  , iDisplayLength = req.query.iDisplayLength      , sSearch = req.query.sSearch    if(!iDisplayStart) iDisplayStart = 0;    if(!iDisplayLength) iDisplayLength = 10;  	var table = query.getTable(mode, type, scope, value),        tabname = query.getTableName(mode, type, scope, value);	type += subtype;	if (!config[mode+type])		return next(new Error('not found'));		var tempConfig ={};	    extend(true,tempConfig,config[mode+type]);     if (sSearch && sSearch != ""){        var filter ={};         if(tempConfig.filter)                filter= tempConfig.filter;        filter.$or = [];        tempConfig.filterColNames.forEach(function(col){                var obj = {};            obj[col] = new RegExp(sSearch);            filter.$or.push(obj);           });             tempConfig.filter = filter;    }         tempConfig.limit = iDisplayLength;    tempConfig.skip = iDisplayStart;           var render = function(count,docs){        var output = {};        var temp = [];        output.sEcho = parseInt(req.query.sEcho);        output.iTotalRecords = count;        output.iTotalDisplayRecords = count;        output.aaData = [];                        docs.forEach(function(item,idx){            tempConfig.colNames.forEach(function(col){                    if(col == '#') {                     temp.push(parseInt(iDisplayStart)+1+idx);                }else{                             temp.push(item[col]);                }                      });            output.aaData.push(temp);            temp = [];        });         var response = JSON.stringify(output);                res.send(response);	}        var proxy = new EventProxy();	proxy.assign('count', 'docs', render);	if(mode == 'TuxState' && type == 'TimeOutTop' && (scope == 'day' || scope == 'month') ){        var iDisplayEnd = iDisplayStart + iDisplayLength - 1;        var sortMax = false;        for(var key in tempConfig.sort){            if(tempConfig.sort[key] == -1 ){                sortMax = true;            }        }        if( sortMax ){            client.zrevrange([tabname, iDisplayStart, iDisplayEnd], function(err, docs){                var redisRet = [];                for (var rsi = 0; rsi < docs.length; rsi++) {                    redisRet.push(JSON.parse(docs[rsi]));                }                proxy.trigger('docs', redisRet);            })        }else{            client.zrange([tabname, iDisplayStart, iDisplayEnd], function(err, docs){                var redisRet = [];                for (var rsi = 0; rsi < docs.length; rsi++) {                    redisRet.push(JSON.parse(docs[rsi]));                }                proxy.trigger('docs', redisRet);            })        }        client.zcard([tabname], function(err, cnt){            proxy.trigger('count', cnt);        })    } else {        table.getCount(tempConfig, function (cnt) {            proxy.trigger('count', cnt);        });        table.list(tempConfig, function (err, docs) {            proxy.trigger('docs', docs);        })    }}